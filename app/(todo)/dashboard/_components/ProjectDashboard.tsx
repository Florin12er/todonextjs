// app/(todo)/dashboard/_components/ProjectDashboard.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { PlusCircle, Folder } from "lucide-react";
import { AddProjectModal } from "./AddProjectModal";

// Mock project data (replace with actual data fetching logic later)
const initialProjects = [
  {
    id: 1,
    name: "Project Alpha",
    color: "#FF5733",
    tasksCompleted: 5,
    totalTasks: 10,
  },
  {
    id: 2,
    name: "Project Beta",
    color: "#33FF57",
    tasksCompleted: 3,
    totalTasks: 8,
  },
  {
    id: 3,
    name: "Project Gamma",
    color: "#3357FF",
    tasksCompleted: 7,
    totalTasks: 12,
  },
  {
    id: 4,
    name: "Project Delta",
    color: "#FF33FF",
    tasksCompleted: 2,
    totalTasks: 6,
  },
];

export function ProjectDashboard() {
  const [projects, setProjects] = useState(initialProjects);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Placeholder for future API call
  useEffect(() => {
    // Fetch projects from API
    // setProjects(fetchedProjects);
  }, []);

  const handleAddProject = (newProject) => {
    // In a real application, you would send this data to your backend
    // and then update the state with the response from the server
    const projectToAdd = {
      id: projects.length + 1, // This should be generated by the backend in a real app
      name: newProject.name,
      color: newProject.color,
      tasksCompleted: 0,
      totalTasks: 0,
      // You might want to add more fields here based on your project structure
    };

    setProjects([...projects, projectToAdd]);
    setIsModalOpen(false);
  };

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Projects Dashboard</h1>
        <Button onClick={() => setIsModalOpen(true)}>
          <PlusCircle className="mr-2 h-4 w-4" /> New Project
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {projects.map((project) => (
          <Link href={`/dashboard/projects/${project.id}`} key={project.id}>
            <Card className="hover:shadow-lg transition-shadow duration-300">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  <Folder
                    className="w-4 h-4 inline-block mr-2"
                    style={{ color: project.color }}
                  />
                  {project.name}
                </CardTitle>
                <div
                  className="w-4 h-4 rounded-full"
                  style={{ backgroundColor: project.color }}
                />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {project.tasksCompleted} / {project.totalTasks}
                </div>
                <p className="text-xs text-muted-foreground">Tasks completed</p>
                <Progress
                  value={(project.tasksCompleted / project.totalTasks) * 100}
                  className="mt-2"
                />
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>

      <AddProjectModal
        isOpen={isModalOpen}
        onOpenChange={setIsModalOpen}
        onAddProject={handleAddProject}
      />
    </div>
  );
}
